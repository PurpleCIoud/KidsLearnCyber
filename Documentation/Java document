For the JavaScript potion of the project the focus was the creation of a quiz elements. The first of which would be for the “quiz page” of the website, while the other element would be for quizzes for the pages themselves. When conducting research in similar systems that other websites that aim for the same demographic, for instance BBC bitesize, the choice for the quiz page was for a multiple-choice test. The reasoning for this was that this allowed for a quiz style that has a base difficulty that is lower than a textbox answer, and/or the option of true or false. The reasoning for this is that the correct answer is already presented to the user, in addition to this it removes the option of misspelling terms being a type of barrier for some students. For the second option a “put the boxes in the correct order” option was chosen, the reasoning behind this was that this offered a different option for the information parts of the webpage, specifically with a focus on the parts relating to security. This is as this option allows for a simple creation of ranking, let’s say, the threats to a system in an order of severity. 
Originally the first goal for creating either of these systems was situated around retrieving the information from a separate file, and then allowing for this to be able to be converted into the data that would be required to show the questions. This data would then be able to be converted into the format of a multi-dimensional array, [Question, answer, Option 1, Option 2, Option 3]. This though proved to be a difficulty the reason for this was two-fold. Firstly, was how this system would interact with the server, and secondly simultaneous interactions with the browser, this specifically was the error of: Cross-Origin Request blocked. This resulted in a situation of chasing two rabbits and catching none, the reason for this is that many solutions that were given relied on server changes or relied on personal bowser settings changes. One other reason that this goal was relinquished, was the systems that the website would be able to interact with, this being that the loading of a file separates from the website. This of cause is not claiming that implementing such a system would be out of reach but could be argued to be reductive, for the sake of fetching an array, that more simply could be hard coded in. As such this was the option that was selected, to simply hard code in the array for the webpage.
In terms of pure code for the multiple choice the method of choosing the questions relied on randomising an array associated to the questions, this used the Durstenfeld shuffle, that said this was moderately copied from a stack overflow page LINK1 , this was as the was no notable way that I could see to change from this solution, as it was already equivalent to the Durstenfeld shuffle:
for i from n−1 down to 1 do
     j ← random integer such that 0 ≤ j ≤ i
     exchange a[j] and a[i]
LINK2
This order then could be used to allow for some but not all the available questions to be able to be selected while randomizing the order present. After this the method of checking the answers relied on the [1] of the QuArray (Question Array), which contained what the correct answer was.
For the order of the boxes, draggable elements were a natural option. That said after many iterations of effort, with the main issue being present being the swapping of the boxes themselves an external code was once again used, this time was more explicit use of code this being in the form of using the code that was available because of page LINK3. The reasoning behind this was to simply avoid parroting the code, resulting in a solution in which by methodology and solution would reflect the code of the page. This said this did not remove the issue that became present in attempting the find the order of the boxes. Out of the variety solutions that were attempted, most revolving around the use of embedding id <p> tags within the div elements to keep track of position. A far easier solution was decided upon, simply compering the inner html of the elements to the order that they were meant to take.



Link 1: https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array
Link 2: https://en.wikipedia.org/wiki/Fisher–Yates_shuffle#The_modern_algorithm
Link 3: https://web.dev/drag-and-drop/
